<link rel="stylesheet" href="/stylesheets/admin/addProduct.css">
<div class="add-product-container">
    <a href="/admin/products" class="back-link">‚Üê Back to product list</a>
    <h1>Add New Product</h1>

    <form class="product-form" action="/admin/add-product" method="post" enctype="multipart/form-data">
        <!-- Description Section -->
        <div class="section">
            {{!-- <h2>Description</h2> --}}

            <div class="form-group">
                <label for="productName">Product Name</label>
                <input type="text" id="productName" placeholder="Product Name" name="productName">
            </div>

            <div class="form-group">
                <label for="description">Product Description</label>
                <textarea id="description" name="productDescription" placeholder="Product Description"></textarea>
            </div>
        </div>

        <!-- Category Section -->
        <div class="section">
            {{!-- <h2>Categories</h2>
            {{#each category}}
            <div class="form-group">
                <label for="productCategory1">{{categoryName}}</label>
                <select id="productCategory1" name="{{categoryName}}">
                    <option>None</option>
                    {{#each subCategories}}
                    <option>{{this}}</option>
                    {{/each}}
                </select>
            </div>
            {{/each}} --}}
            <h2>Brand</h2>
            <div class="form-group">

                <select id="productCategory1" name="brand">
                    <option selected disabled>None</option>
                    {{#each brands}}
                    <option>{{categoryName}}</option>
                    {{/each}}
                </select>
            </div>
            <h2>Type</h2>
            <div class="form-group">

                <select id="productCategory1" name="type">
                    <option selected disabled>None</option>
                    {{#each types}}
                    <option>{{categoryName}}</option>
                    {{/each}}
                </select>
            </div>
            <h2>Gears</h2>
            <div class="form-group">

                <select id="productCategory1" name="gear">
                    <option selected disabled>None</option>
                    {{#each gears}}
                    <option>{{categoryName}}</option>
                    {{/each}}
                </select>
            </div>
        </div>
        <!-- Price -->
        <div class="section">
            <h2>Price</h2>
            <div class="form-group">
                <input type="number" name="price" placeholder="Price">
            </div>
        </div>

        <!-- Inventory Section -->
        <div class="section">
            <h2>Inventory</h2>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <input type="number" id="quantity" name="stock" placeholder="Min 10">
            </div>
        </div>


        <!-- Image Upload Section -->
        <div class="section">
            <h2>Images</h2>

            <div class="image-upload-grid">
                <div class="image-upload-group">
                    <label for="imageUpload1" class="image-upload-label">
                        <img src="#" alt="Upload Image" class="main-image-preview">
                        <span>Upload Main Image</span>
                    </label>
                    <input type="file" id="imageUpload1" name="mainImage" style="display: none;"
                        accept="image/jpeg, image/png">
                </div>

                <div class="image-upload-group">
                    <label for="imageUpload2" class="image-upload-label">
                        <img src="#" alt="Upload Image" class="thumbnail-preview" id="thumbnail-preview-placeholder">
                        <span>Upload Additional Images</span>
                    </label>
                    <input type="file" id="imageUpload2" style="display: none;" name="additionalImages"
                        accept="image/jpeg, image/png" multiple>
                </div>
            </div>

            <div class="additional-images-preview" id="additional-images-preview">
                <!-- Additional images will be dynamically inserted here -->
            </div>
        </div>


        <!-- Submit Button -->
        <div class="form-group">
            <button type="submit">Add Product</button>
        </div>
    </form>
</div>

{{!-- Modal --}}
<div id="cropperModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Crop Image</h2>
        <div class="image-container">
            <img id="imageToCrop" src="#" alt="Image to Crop">
        </div>
        <button id="cropButton">Crop and Save</button>
    </div>
</div>

<script>
    {/* document.addEventListener('DOMContentLoaded', () => {
    const mainImageInput = document.getElementById('imageUpload1');
    const additionalImageInput = document.getElementById('imageUpload2');
    const mainImagePreview = document.querySelector('.main-image-preview');
    const additionalImagesPreview = document.getElementById('additional-images-preview');

    // Handle main image preview
    mainImageInput.addEventListener('change', () => {
        const file = mainImageInput.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = () => {
                mainImagePreview.src = reader.result;
            };
            reader.readAsDataURL(file);
        }
    });

    // Handle additional images preview
    additionalImageInput.addEventListener('change', () => {
        additionalImagesPreview.innerHTML = ''; // Clear previous previews
        const files = additionalImageInput.files;

        Array.from(files).forEach(file => {
            const reader = new FileReader();
            reader.onload = () => {
                const img = document.createElement('img');
                img.src = reader.result;
                img.className = 'thumbnail-preview';
                additionalImagesPreview.appendChild(img);
            };
            reader.readAsDataURL(file);
        });
    });
}); */} document.addEventListener('DOMContentLoaded', () => {
        const mainImageInput = document.getElementById('imageUpload1');
        const additionalImageInput = document.getElementById('imageUpload2');
        const mainImagePreview = document.querySelector('.main-image-preview');
        const additionalImagesPreview = document.getElementById('additional-images-preview');
        const modal = document.getElementById('cropperModal');
        const closeModal = document.querySelector('.close');
        const cropButton = document.getElementById('cropButton');
        let cropper;
        let currentInput;
        let additionalImagesDataTransfer = new DataTransfer();

        const allowedTypes = ['image/jpeg', 'image/png'];
        const maxFileSize = 5 * 1024 * 1024;
        const validateFileType = (file) => {
            if (file.size > maxFileSize) {
                toastr.warning('File size must be less than 5 MB.');
                return false;
            }
            if (!allowedTypes.includes(file.type)) {
                toastr.warning('Only JPEG and PNG files are allowed.');
                return false;
            }
            return true;
        };

        // Show modal when the main image is selected
        mainImageInput.addEventListener('change', () => {
            const file = mainImageInput.files[0];
            if (file && validateFileType(file)) {
                const reader = new FileReader();
                reader.onload = () => {
                    const imageToCrop = document.getElementById('imageToCrop');
                    imageToCrop.src = reader.result;
                    modal.style.display = "block";
                    currentInput = mainImageInput;

                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(imageToCrop, {
                        aspectRatio: 1,
                        viewMode: 2,
                        movable: true,
                        zoomable: true,
                        rotatable: true,
                        scalable: true,
                    });
                };
                reader.readAsDataURL(file);
            } else {
                mainImageInput.value = ''; // Reset the input if the file type is invalid
            }
        });

        // Show modal when an additional image is selected
        additionalImageInput.addEventListener('change', () => {
            const file = additionalImageInput.files[0];
            if (file && validateFileType(file)) {
                const reader = new FileReader();
                reader.onload = () => {
                    const imageToCrop = document.getElementById('imageToCrop');
                    imageToCrop.src = reader.result;
                    modal.style.display = "block";
                    currentInput = additionalImageInput;

                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(imageToCrop, {
                        aspectRatio: 1,
                        viewMode: 2,
                        movable: true,
                        zoomable: true,
                        rotatable: true,
                        scalable: true,
                    });
                };
                reader.readAsDataURL(file);
            } else {
                additionalImageInput.value = ''; // Reset the input if the file type is invalid
            }
        });

        // Close modal
        closeModal.onclick = () => {
            modal.style.display = "none";
            if (cropper) {
                cropper.destroy();
            }
        };

        // Crop and save image
        cropButton.onclick = () => {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob((blob) => {
                const uniqueFilename = `cropped-image-${Date.now()}-${Math.floor(Math.random() * 1000)}.png`;
                const croppedFile = new File([blob], uniqueFilename, { type: "image/png" });

                if (currentInput === mainImageInput) {
                    const url = URL.createObjectURL(blob);
                    mainImagePreview.src = url;
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(croppedFile);
                    mainImageInput.files = dataTransfer.files;
                } else if (currentInput === additionalImageInput) {
                    // Display cropped image
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(blob);
                    img.className = 'thumbnail-preview';
                    additionalImagesPreview.appendChild(img);

                    // Add the new cropped file to the DataTransfer object for additional images
                    additionalImagesDataTransfer.items.add(croppedFile);
                    additionalImageInput.files = additionalImagesDataTransfer.files;
                }

                // Close modal and destroy cropper instance
                modal.style.display = "none";
                cropper.destroy();
            });
        };

        // Close modal if clicked outside
        window.addEventListener('click', (event) => {
            if (event.target == modal) {
                modal.style.display = "none";
                if (cropper) {
                    cropper.destroy();
                }
            }
        });
        const form = document.querySelector('.product-form');
        // Validate before form submission
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // Prevent default form submission

            // Get input values
            const productName = document.getElementById('productName').value.trim();
            const productDescription = document.getElementById('description').value.trim();
            const price = parseFloat(document.querySelector('input[name="price"]').value);

            // Category selections
            const brandSelected = document.querySelector('select[name="brand"]').value !== 'None';
            const typeSelected = document.querySelector('select[name="type"]').value !== 'None';
            const gearSelected = document.querySelector('select[name="gear"]').value !== 'None';

            // Stock and image uploads
            const stock = parseInt(document.querySelector('input[name="stock"]').value);
            const mainImageUploaded = mainImageInput.files.length > 0;
            const additionalImagesUploaded = additionalImagesDataTransfer.items.length > 0;

            // Regular expression to check for at least one alphabetic character
            const containsAlphabet = (str) => /[a-zA-Z]/.test(str);

            // Validate inputs
            if (!productName || !containsAlphabet(productName)) {
                toastr.warning('Product name cannot be empty and must contain at least one alphabetic character.'); // Alert for product name
            } else if (!productDescription || productDescription.length < 350 || !containsAlphabet(productDescription)) {
                toastr.warning('Product description must be at least 350 characters long and contain at least one alphabetic character.'); // Alert for product description
            } else if (!brandSelected) {
                toastr.warning('Please select a brand.'); // Alert for brand selection
            } else if (!typeSelected) {
                toastr.warning('Please select a type.'); // Alert for type selection
            } else if (!gearSelected) {
                toastr.warning('Please select a gear.'); // Alert for gear selection
            }else if(!price){
                toastr.warning('Please fill in the price field.')
            }else if (isNaN(price) || price < 0) {
                toastr.warning('Price must be a non-negative number.'); // Alert for price
            } else if (isNaN(stock) || stock < 0) {
                toastr.warning('Stock must be a non-negative number.'); // Alert for stock
            } else if (!mainImageUploaded) {
                toastr.warning('Please upload a main image.'); // Alert for main image
            } else if (!additionalImagesUploaded) {
                toastr.warning('Please upload at least one additional image.'); // Alert for additional images
            } else {
                form.submit(); // Programmatically submit the form if validation passes
            }
        });

    });
</script>